
name: Unity Bulid

on:
  pull_request: 
    types:
      - opened
      - synchronize
    branches: 
      - 'main'
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      target:
        description: 'Choose a target'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - failure test
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: .
  SOME_ENV_VAR: ${{ github.event.inputs.target }}
  SCRIPTING_BACKEND: ${{ github.event.inputs.scripting_backend }}
jobs:

  test:
    uses: ./.github/workflows/Test runner.yml
    secrets: inherit
    
  build:
    needs: [test]
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: [ self-hosted, "${{ matrix.os }}" ]
    environment: 
      name: production
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            targetPlatform: Android
          - os: Windows
            targetPlatform: StandaloneWindows64
         # - StandaloneOSX
         # - StandaloneWindows
         # - StandaloneLinux64
         # - iOS
         # - WebGL
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0
          
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
            
      - name: Check for errors
        shell: pwsh
        run: |
          # Example condition where we trigger an error
          if ($env:SOME_ENV_VAR -eq "failure test") {
              Write-Host "Error: Something went wrong"
              exit 1 # or throw "Something went wrong"
          }
          
      - name: Get Commit Info
        if: ${{ !cancelled() }}
        uses: zxc30314/git-commit-info@main
        id: info
        with:
            ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
            
      # https://github.com/game-ci/unity-builder/releases/
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: UnityBuilderAction.BuildScript.Build
          customParameters: -setScriptingBackend ${{env.SCRIPTING_BACKEND}}
          
      - name: Zip build file 
        shell: pwsh
        run: |
            $sourcePath = "${{ env.PROJECT_PATH }}/build/${{ matrix.targetPlatform }}"
            $destinationPath = "${{ matrix.targetPlatform }}.zip"
        
            if (-Not (Test-Path -Path $sourcePath)) {
                Write-Error "Source path '$sourcePath' does not exist."
                exit 1
            }
        
            Compress-Archive -Path "$sourcePath\*" -DestinationPath $destinationPath
            Write-Host "Build contents zipped to $destinationPath"
    
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HHmmSS
          utcOffset: "+08:00"
          
      - name: Upload to WebDAV
        shell: pwsh
        env:
          WEBDAV_URL: ${{ secrets.WEBDAV_ADDRESS }}        
          WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}  
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}  
          FILE_PATH: "./${{matrix.targetPlatform}}.zip"
          TARGET_DIR: "/${{ steps.current-time.outputs.formattedTime}}"
        run: |
          $webdavUrl = $env:WEBDAV_URL.TrimEnd('/')
          $username = $env:WEBDAV_USERNAME
          $password = $env:WEBDAV_PASSWORD
          $filePath = $env:FILE_PATH
          $targetDir = $env:TARGET_DIR.TrimStart('/')
          
          $baseUri = [System.Uri]::new($webdavUrl)
          $targetDirUri = [System.Uri]::new($baseUri, $targetDir + '/') 
          $fileUri = [System.Uri]::new($targetDirUri, (Split-Path -Leaf $filePath))  
          
          $credentials = New-Object PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force))
          
          try {
              Write-Host "Checking if directory exists..."
              try {
                  $response = Invoke-WebRequest -Uri $targetDirUri.AbsoluteUri -Credential $credentials -Method Head -ErrorAction Stop
                  if ($response.StatusCode -eq 200) {
                      Write-Host "Directory exists."
                  }
              } catch [System.Net.WebException] {
                  if ($_.Exception.Response.StatusCode -eq 404) {
                      Write-Host "Directory does not exist, creating it..."
                      Invoke-WebRequest -Uri $targetDirUri.AbsoluteUri -Credential $credentials -Method MKCOL -ErrorAction Stop
                      Write-Host "Directory created successfully."
                  } else {
                      Write-Host "Error: $($_.Exception.Message)"
                      exit 1
                  }
              }
          
              Write-Host "Uploading file to WebDAV..."
              Invoke-WebRequest -Uri $fileUri.AbsoluteUri -Credential $credentials -Method Put -InFile $filePath -ErrorAction Stop
              Write-Host "File uploaded successfully."
          } catch {
              Write-Host "Error: $($_.Exception.Message)"
              exit 1
          }

      - name: Send success message to Discord
        if: ${{success()}}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "[${{github.event.repository.name}}:${{github.ref_name}}] ${{matrix.targetPlatform}} has been deployed."
          embed-url: "${{secrets.WEBDAV_ADDRESS}}/${{ steps.current-time.outputs.formattedTime}}/${{matrix.targetPlatform}}.zip"
          embed-description: "[``${{steps.info.outputs.sha_short}}``](${{steps.info.outputs.url}}) ${{steps.info.outputs.commit_message}} -${{steps.info.outputs.username}}"
          embed-color: 7506394
          avatar-url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub
          embed-author-name: ${{github.event.sender.login}}
          embed-author-url: ${{github.event.sender.html_url}}
          embed-author-icon-url: ${{github.event.sender.avatar_url}}$

      - name: Get current job log URL
        if: ${{failure()}}
        uses: zxc30314/gha-jobid-action@main
        id: jobs
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          job_name: "Build for ${{ matrix.targetPlatform }}"

      - name: Send failure message to Discord
        if: ${{failure()}}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "[${{github.event.repository.name}}:${{github.ref_name}}] ${{github.workflow}} ${{matrix.targetPlatform}} failure"
          embed-url: "${{steps.jobs.outputs.html_url}}"
          embed-description: "[``${{steps.info.outputs.sha_short}}``](${{steps.info.outputs.url}}) ${{steps.info.outputs.commit_message}} -${{steps.info.outputs.username}}"
          embed-color: 16711680
          avatar-url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub
          embed-author-name: ${{github.event.sender.login}}
          embed-author-url: ${{github.event.sender.html_url}}
          embed-author-icon-url: ${{github.event.sender.avatar_url}}
        
        
          
          
