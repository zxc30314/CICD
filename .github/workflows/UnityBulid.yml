
name: Unity Bulid

on:
  pull_request: 
    types:
      - opened
      - synchronize
    branches: 
      - 'main'
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      target:
        description: 'Choose a target'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - failure test
      scripting_backend:
        description: 'Scripting Backend'
        required: true
        default: 'il2cpp'
        type: choice
        options:
          - il2cpp
          - mono
      build_pc:
        description: 'PC'
        required: false
        type: boolean
        default: true
      build_android:
        description: 'Android'
        required: false
        type: boolean
        default: true
      environment:
          type: environment
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: .
  SOME_ENV_VAR: ${{ github.event.inputs.target }}
  SCRIPTING_BACKEND: ${{ github.event.inputs.scripting_backend }}
jobs:

 # test:
 #   uses: ./.github/workflows/Test runner.yml
 #   secrets: inherit
    
  build:
   # needs: [test]
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: [ self-hosted, "${{ matrix.os }}" ]
    environment: 
      name: production
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            targetPlatform: Android
          - os: Windows
            targetPlatform: StandaloneWindows64

         # - StandaloneOSX
         # - StandaloneWindows
         # - StandaloneLinux64
         # - iOS
         # - WebGL
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0
          
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
            
      - name: Check for errors
        shell: pwsh
        run: |
          # Example condition where we trigger an error
          if ($env:SOME_ENV_VAR -eq "failure test") {
              Write-Host "Error: Something went wrong"
              exit 1 # or throw "Something went wrong"
          }
          
      - name: Get Commit Info
        if: ${{ !cancelled() }}
        uses: zxc30314/git-commit-info@main
        id: info
        with:
            ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
            
      - name: Modify ProjectSettings.asset file
        run: |
         $projectSettingsFilePath = "${{ env.PROJECT_PATH }}\\ProjectSettings\\ProjectSettings.asset"
            
            # 获取文件内容
            $fileContent = Get-Content -Path $projectSettingsFilePath
        
            # 读取 SCRIPTING_BACKEND 环境变量并根据它决定新的值
            $scriptingBackendValue = if ($env:SCRIPTING_BACKEND -eq 'il2cpp') { 1 } else { 0 }
        
            # 输出调试信息
            Write-Output "SCRIPTING_BACKEND: $env:SCRIPTING_BACKEND"
            Write-Output "New Standalone value: $scriptingBackendValue"
        
            # 替换 'Standalone: 0' 为 'Standalone: 1' 或 'Standalone: 0'，根据 SCRIPTING_BACKEND 值
            $fileContent = $fileContent -replace '(scriptingBackend:\s*)(Standalone:\s*)0', "`$1`$2 $scriptingBackendValue"
        
            # 输出修改后的内容
            Write-Output "Modified content:"
            Write-Output $fileContent
        
            # 保存修改后的内容
            Set-Content -Path $projectSettingsFilePath -Value $fileContent
        shell: pwsh
      
      # https://github.com/game-ci/unity-builder/releases/

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: UnityBuilderAction.BuildScript.Build
          customParameters: -setScriptingBackend ${{env.SCRIPTING_BACKEND}}
          
      - name: Zip build file 
        shell: pwsh
        run: |
            $sourcePath = "${{ env.PROJECT_PATH }}/build/${{ matrix.targetPlatform }}"
            $destinationPath = "${{ matrix.targetPlatform }}.zip"
        
            if (-Not (Test-Path -Path $sourcePath)) {
                Write-Error "Source path '$sourcePath' does not exist."
                exit 1
            }
        
            Compress-Archive -Path "$sourcePath\*" -DestinationPath $destinationPath
            Write-Host "Build contents zipped to $destinationPath"
    
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HHmmSS
          utcOffset: "+08:00"
          
  #    - name: Upload to WebDAV
  #      uses: bxb100/action-upload-webdav@v1
  #      with:
  #        webdav_address: ${{ secrets.WEBDAV_ADDRESS }}
  #        webdav_username: ${{ secrets.WEBDAV_USERNAME }}
  #        webdav_password: ${{ secrets.WEBDAV_PASSWORD }}
  #        webdav_upload_path: /${{ steps.current-time.outputs.formattedTime}}
  #        files: '${{matrix.targetPlatform}}.zip'
  
      - name: Upload to WebDAV
        shell: pwsh
        env:
          WEBDAV_URL: ${{ secrets.WEBDAV_ADDRESS }}        # WebDAV 服务器 URL
          WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}  # WebDAV 用户名
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}  # WebDAV 密码
          FILE_PATH: "./${{matrix.targetPlatform}}.zip"  # 要上传的文件路径
          TARGET_DIR: "/${{ steps.current-time.outputs.formattedTime}}"  # 目标文件夹路径
        run: |
          $webdavUrl = $env:WEBDAV_URL
          $username = $env:WEBDAV_USERNAME
          $password = $env:WEBDAV_PASSWORD
          $filePath = $env:FILE_PATH
          $targetDir = $env:TARGET_DIR

          # 创建 WebClient 实例
          $webClient = New-Object System.Net.WebClient
          $webClient.Credentials = New-Object System.Net.NetworkCredential($username, $password)

          try {
              # 创建目标目录 (MKCOL)
              Write-Host "Checking if directory exists: $targetDir"
              $checkDirUrl = "$webdavUrl$targetDir"
              try {
                  # 尝试请求目录，查看是否存在
                  $webClient.OpenRead($checkDirUrl) | Out-Null
                  Write-Host "Directory exists."
              } catch {
                  Write-Host "Directory does not exist, creating directory..."
                  # 目录不存在，创建目录
                  $webClient.UploadString("$webdavUrl$targetDir", "MKCOL", "")
                  Write-Host "Directory created."
              }

              # 上传文件
              Write-Host "Uploading file to WebDAV..."
              $webClient.UploadFile("$webdavUrl$targetDir/$(Split-Path -Leaf $filePath)", "PUT", $filePath)
              Write-Host "File uploaded successfully."
          } catch {
              Write-Host "Error: $($_.Exception.Message)"
              exit 1
          }

      - name: Send success message to Discord
        if: ${{success()}}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "[${{github.event.repository.name}}:${{github.ref_name}}] ${{matrix.targetPlatform}} has been deployed."
          embed-url: "${{secrets.WEBDAV_ADDRESS}}/${{ steps.current-time.outputs.formattedTime}}/${{matrix.targetPlatform}}.zip"
          embed-description: "[``${{steps.info.outputs.sha_short}}``](${{steps.info.outputs.url}}) ${{steps.info.outputs.commit_message}} -${{steps.info.outputs.username}}"
          embed-color: 7506394
          avatar-url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub
          embed-author-name: ${{github.event.sender.login}}
          embed-author-url: ${{github.event.sender.html_url}}
          embed-author-icon-url: ${{github.event.sender.avatar_url}}$

      - name: Get current job log URL
        if: ${{failure()}}
        uses: zxc30314/gha-jobid-action@main
        id: jobs
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          job_name: "Build for ${{ matrix.targetPlatform }}"

      - name: Send failure message to Discord
        if: ${{failure()}}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "[${{github.event.repository.name}}:${{github.ref_name}}] ${{github.workflow}} ${{matrix.targetPlatform}} failure"
          embed-url: "${{steps.jobs.outputs.html_url}}"
          embed-description: "[``${{steps.info.outputs.sha_short}}``](${{steps.info.outputs.url}}) ${{steps.info.outputs.commit_message}} -${{steps.info.outputs.username}}"
          embed-color: 16711680
          avatar-url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub
          embed-author-name: ${{github.event.sender.login}}
          embed-author-url: ${{github.event.sender.html_url}}
          embed-author-icon-url: ${{github.event.sender.avatar_url}}
        
        
          
          
