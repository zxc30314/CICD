
name: Unity Bulid
on:
  pull_request: 
    types:
      - opened
      - synchronize
    branches: 
      - 'main'
  push:
    branches:
      - 'main'
  workflow_dispatch:
   inputs:
    version:
      required: true
      type: string
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: .

jobs:
  checklicense:
    uses: ./.github/workflows/CheckLicense.yml
    secrets: inherit

  test:
    needs: [checklicense]
    uses: ./.github/workflows/Test runner.yml
    secrets: inherit

  build:
    needs: [checklicense]
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: self-hosted
    environment: 
      name: production
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
         # - StandaloneOSX
         # - StandaloneWindows
          - StandaloneWindows64
         # - StandaloneLinux64
         # - iOS
         # - Android
          # See https://github.com/game-ci/docker/issues/53 webgl will be supported in editor image v0.9
          # - WebGL
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      # https://github.com/game-ci/unity-builder/releases/
   
      - uses: game-ci/unity-builder@v2.1.0
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          
      - name: zip bulid file
        run: zip -r '${{matrix.targetPlatform}}.zip' ${{env.PROJECT_PATH}}/build/${{matrix.targetPlatform}}
        
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HHmmSS
          utcOffset: "+08:00"
          
      - name: Upload to WebDAV
        uses: bxb100/action-upload-webdav@v1
        with:
          webdav_address: ${{ secrets.WEBDAV_ADDRESS }}
          webdav_username: ${{ secrets.WEBDAV_USERNAME }}
          webdav_password: ${{ secrets.WEBDAV_PASSWORD }}
          webdav_upload_path: /${{ steps.current-time.outputs.formattedTime}}
          files: '${{matrix.targetPlatform}}.zip'
          
      - name: Declare some variables
        if: ${{ !cancelled()}}
        shell: bash
        run: |
          commit_message="$(git log -1 --no-merges --pretty=%B)"
          echo "commit_message=$commit_message" >> $GITHUB_ENV

      - name: Declare some variables on pr
        if: ${{ !cancelled() && github.event_name == 'pull_request'}}
        shell: bash
        run: |
          branch_ref="${GITHUB_REF#refs/heads/}"
          converted_ref=$(echo "$branch_ref" | sed -n 's|refs/pull/\([0-9]*\)/merge|pull/\1|p')
          sha=${{github.event.pull_request.head.sha }}
          sha_short=$(echo "$sha" | cut -c 1-7)
          echo "sha_short=$env.sha_short"
          echo "sha_short=$sha_short" >> "$GITHUB_ENV"
          echo "username=$(curl -H 'Accept: application/vnd.github.v3+json' -H "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" https://api.github.com/repos/${{ github.event.repository.full_name }}/commits/$sha | jq -r '.author.login')" >> "$GITHUB_ENV"
          echo "url=https://github.com/${{github.event.repository.full_name}}/$converted_ref/commits/$sha" >> "$GITHUB_ENV"

      - name: Declare some variables on push
        if: ${{ !cancelled() && env.url=='' }}
        shell: bash
        run: |
          sha_short=$(git rev-parse --short "$GITHUB_SHA")
          sha=${{ github.sha }}
          echo "sha_short=$sha_short" >> "$GITHUB_ENV"
          echo "username=$(curl -H 'Accept: application/vnd.github.v3+json' -H "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" https://api.github.com/repos/${{ github.event.repository.full_name }}/commits/$sha | jq -r '.author.login')" >> "$GITHUB_ENV"
          echo "url=https://github.com/${{github.event.repository.full_name}}/commit/$sha" >> "$GITHUB_ENV"

   

      - name: Send success message to Discord
        if: ${{success()}}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "[${{github.event.repository.name}}:${{github.ref_name}}] has been deployed."
          embed-url: "${{secrets.WEBDAV_ADDRESS}}/${{ steps.current-time.outputs.formattedTime}}/${{matrix.targetPlatform}}.zip"
          embed-description: "[``${{env.sha_short}}``](${{env.url}}) ${{env.commit_message}} -${{env.username}}"
          embed-color: 7506394
          avatar-url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub
          embed-author-name: ${{github.event.sender.login}}
          embed-author-url: ${{github.event.sender.html_url}}
          embed-author-icon-url: ${{github.event.sender.avatar_url}}

      - name: Get current job log URL
        if: ${{failure()}}
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          job_name: "Build for ${{ matrix.targetPlatform }}"
      - name: Print Variables
        if: ${{ !cancelled()}}
        run: |
          echo "sha_short=$env.sha_short"
          echo "message=$env.commit_message"
          echo "username=$env.username"
          echo "url=$env.url"
          echo "${{steps.jobs.outputs.html_url}}"
      - name: Send failure message to Discord
        if: ${{failure()}}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "[${{github.event.repository.name}}:${{github.ref_name}}] ${{github.workflow}} failure"
          embed-url: "${{steps.jobs.outputs.html_url}}"
          embed-description: "[``${{env.sha_short}}``](${{env.url}}) ${{env.commit_message}} -${{env.username}}"
          embed-color: 16711680
          avatar-url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub
          embed-author-name: ${{github.event.sender.login}}
          embed-author-url: ${{github.event.sender.html_url}}
          embed-author-icon-url: ${{github.event.sender.avatar_url}}
        
        
          
          
