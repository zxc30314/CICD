name: Modify Unity Scripting Backend

on:
  push:
  workflow_dispatch:

jobs:
  modify-settings:
    runs-on: Windows  # 使用 Windows 环境来执行 PowerShell 脚本
    env:
      PROJECT_PATH: .
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Test DNS resolution
      run: |
        nslookup ${{ secrets.WEBDAV_ADDRESS }}
    - name: Install YAML module
      run: |
        # 安装 powershell-yaml 模块
        Install-Module -Name powershell-yaml -Force -Scope CurrentUser
        
    - name: Modify ProjectSettings.asset file
      run: |
        # 使用相对路径读取文件内容
        $filePath = "ProjectSettings\\ProjectSettings.asset"
        
        # 加载 YAML 文件
        $yamlContent = Get-Content -Path $filePath -Raw | ConvertFrom-Yaml

        # 输出文件内容（调试用）
        Write-Output "Original content:"
        Write-Output $yamlContent

        # 修改 Standalone 值
        if ($yamlContent.PlayerSettings.scriptingBackend.Standalone -eq 0) {
          $yamlContent.PlayerSettings.scriptingBackend.Standalone = 1
        }

        # 输出修改后的内容（调试用）
        Write-Output "Modified content:"
        Write-Output $yamlContent

        # 将修改后的内容保存回 YAML 文件
        $yamlContent | ConvertTo-Yaml | Set-Content -Path $filePath
      shell: pwsh
      env:
        PROJECT_PATH: ${{ secrets.PROJECT_PATH }}  # 通过 GitHub Secrets 管理项目路径

    - name: Upload to WebDAV
      shell: pwsh
      env:
          WEBDAV_URL: ${{ secrets.WEBDAV_ADDRESS }}        # WebDAV 服务器 URL
          WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}  # WebDAV 用户名
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}  # WebDAV 密码
          FILE_PATH: "./ProjectSettings/ProjectSettings.asset"  # 要上传的文件路径
          TARGET_DIR: "/AAA"  # WebDAV 服务器上的目标文件夹路径
      run: |
          $webdavUrl = "$($env:WEBDAV_URL.TrimEnd('/'))"
          $username = $env:WEBDAV_USERNAME
          $password = $env:WEBDAV_PASSWORD
          $filePath = $env:FILE_PATH
          $targetDir = "$($env:TARGET_DIR.TrimStart('/'))"

          # 拼接 URL
          $checkDirUrl = "$webdavUrl$targetDir"
          $uploadUrl = "$checkDirUrl/$(Split-Path -Leaf $filePath)"
          
          Write-Host "WebDAV URL: $webdavUrl"
          Write-Host "Target Directory: $targetDir"
          Write-Host "checkDirUrl : $checkDirUrl"
          # 创建认证凭据对象
          $credentials = New-Object PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force))

          # 检查目录是否存在
          try {
              Write-Host "Checking if directory exists: $targetDir"
              $response = Invoke-WebRequest -Uri $checkDirUrl -Credential $credentials -Method Head -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                  Write-Host "Directory exists."
              }
          } catch [System.Net.WebException] {
              if ($_.Exception.Response.StatusCode -eq 404) {
                  Write-Host "Directory does not exist, creating it..."
                  Invoke-WebRequest -Uri $checkDirUrl -Credential $credentials -Method MKCOL -ErrorAction Stop
                  Write-Host "Directory created successfully."
              } else {
                  Write-Host "Unexpected error: $($_.Exception.Message)"
                  exit 1
              }
          }

          # 上传文件
          try {
              Write-Host "Uploading file to WebDAV..."
              Invoke-WebRequest -Uri $uploadUrl -Credential $credentials -Method Put -InFile $filePath -ErrorAction Stop
              Write-Host "File uploaded successfully."
          } catch {
              Write-Host "Error during file upload: $($_.Exception.Message)"
              exit 1
          }
