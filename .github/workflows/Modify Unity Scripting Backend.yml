name: Modify Unity Scripting Backend

on:
  push:
  workflow_dispatch:

jobs:
  modify-settings:
    runs-on: Windows  # 使用 Windows 环境来执行 PowerShell 脚本
    env:
      PROJECT_PATH: .
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install YAML module
      run: |
        # 安装 powershell-yaml 模块
        Install-Module -Name powershell-yaml -Force -Scope CurrentUser
        
    - name: Modify ProjectSettings.asset file
      run: |
        # 使用相对路径读取文件内容
        $filePath = "ProjectSettings\\ProjectSettings.asset"
        
        # 加载 YAML 文件
        $yamlContent = Get-Content -Path $filePath -Raw | ConvertFrom-Yaml

        # 输出文件内容（调试用）
        Write-Output "Original content:"
        Write-Output $yamlContent

        # 修改 Standalone 值
        if ($yamlContent.PlayerSettings.scriptingBackend.Standalone -eq 0) {
          $yamlContent.PlayerSettings.scriptingBackend.Standalone = 1
        }

        # 输出修改后的内容（调试用）
        Write-Output "Modified content:"
        Write-Output $yamlContent

        # 将修改后的内容保存回 YAML 文件
        $yamlContent | ConvertTo-Yaml | Set-Content -Path $filePath
      shell: pwsh
      env:
        PROJECT_PATH: ${{ secrets.PROJECT_PATH }}  # 通过 GitHub Secrets 管理项目路径

    - name: Upload to WebDAV
      shell: pwsh
      env:
          WEBDAV_URL: ${{ secrets.WEBDAV_ADDRESS }}        # WebDAV 服务器 URL
          WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}  # WebDAV 用户名
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}  # WebDAV 密码
          FILE_PATH: "./$ProjectSettings/ProjectSettings.asset"  # 要上传的文件路径
          TARGET_DIR: "/AAA"  # 目标文件夹路径
      run: |
          $webdavUrl = $env:WEBDAV_URL
          $username = $env:WEBDAV_USERNAME
          $password = $env:WEBDAV_PASSWORD
          $filePath = $env:FILE_PATH
          $targetDir = $env:TARGET_DIR
          # 创建 WebClient 实例
          $webClient = New-Object System.Net.WebClient
          $webClient.Credentials = New-Object System.Net.NetworkCredential($username, $password)
          try {
              # 创建目标目录 (MKCOL)
              Write-Host "Checking if directory exists: $targetDir"
              $checkDirUrl = "$webdavUrl$targetDir"
              try {
                  # 尝试请求目录，查看是否存在
                  $webClient.OpenRead($checkDirUrl) | Out-Null
                  Write-Host "Directory exists."
              } catch {
                  Write-Host "Directory does not exist, creating directory..."
                  # 目录不存在，创建目录
                  $webClient.UploadString("$webdavUrl$targetDir", "MKCOL", "")
                  Write-Host "Directory created."
              }
              # 上传文件
              Write-Host "Uploading file to WebDAV..."
              $webClient.UploadFile("$webdavUrl$targetDir/$(Split-Path -Leaf $filePath)", "PUT", $filePath)
              Write-Host "File uploaded successfully."
          } catch {
              Write-Host "Error: $($_.Exception.Message)"
              exit 1
          }
